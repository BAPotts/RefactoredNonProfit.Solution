// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NonProfit.Models;

namespace NonProfit.Migrations
{
    [DbContext(typeof(NonProfitContext))]
    [Migration("20200806210336_InitialB")]
    partial class InitialB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NonProfit.Models.Donation", b =>
                {
                    b.Property<int>("DonationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Money");

                    b.HasKey("DonationId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("NonProfit.Models.Donor", b =>
                {
                    b.Property<int>("DonorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("DonorId");

                    b.ToTable("Donors");
                });

            modelBuilder.Entity("NonProfit.Models.DonorDonation", b =>
                {
                    b.Property<int>("DonorDonationId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DonationId");

                    b.Property<int>("DonorId");

                    b.HasKey("DonorDonationId");

                    b.HasIndex("DonationId");

                    b.HasIndex("DonorId");

                    b.ToTable("DonorDonation");
                });

            modelBuilder.Entity("NonProfit.Models.DonorDonation", b =>
                {
                    b.HasOne("NonProfit.Models.Donation", "Donation")
                        .WithMany("Donors")
                        .HasForeignKey("DonationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NonProfit.Models.Donor", "Donor")
                        .WithMany("Donations")
                        .HasForeignKey("DonorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
